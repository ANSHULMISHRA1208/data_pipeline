CURRENT_VERSION=$(strip $(shell sed -n -r "s/__version__ = '(.+)'/\1/p" $(CURDIR)/data_pipeline/__init__.py))
NEXT_VERSION=$(shell echo $(CURRENT_VERSION) | awk -F. '/[0-9]+\./{$$NF+=1;OFS=".";print}')

REBUILD_FLAG =

.PHONY: help all production clean clean-pyc clean-build clean-docs clean-vim lint test docs coverage install-hooks compose-prefix

help:
	@echo "clean-build - remove build artifacts"
	@echo "clean-pyc - remove Python file artifacts"
	@echo "clean-docs - remove doc creation artifacts"
	@echo "clean-vim - remove vim swap file artifacts"
	@echo "test - run tests quickly with the default Python"
	@echo "coverage - check code coverage"
	@echo "docs - generates Sphinx HTML documentation, including API docs"
	@echo "compose-prefix - generates a preconfigured docker-compose command"
	@echo "get-venv-update - fetched the latest version of venv-update"

all: production install-hooks

production:
	@true

clean: clean-build clean-pyc clean-docs

clean-build:
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

clean-pyc:
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +

clean-docs:
	rm -rf docs/build/*
	rm -rf docs/code/*

clean-vim:
	find . -name '*.swp' -exec rm -f {} +
	find . -name '*.swo' -exec rm -f {} +

test:
	# This will timeout after 15 minutes, in case there is a hang on jenkins
	OPEN_SOURCE_MODE=true PULL_CONTAINERS=true FORCE_FRESH_CONTAINERS=true timeout -9 1800 tox $(REBUILD_FLAG)

docs: clean-docs 
	tox -e docs $(REBUILD_FLAG)

coverage: test

install-hooks:
	tox -e pre-commit -- install -f --install-hooks

compose-prefix:
	@python -c "from data_pipeline.testing_helpers.containers import Containers; print Containers.compose_prefix()"
